#xsvest05 | KRY - 1. project | VUT FIT
#Feige-Fiat-Shamir identification protocol

import ssl
import math
from random import randint

class FFS(object):

	def __init__(self):
		#from email
		self.n = long(76896662714508286744734522772713649137443706128590068779597453717856379874574814984143284622510044159265596543879704128520614753614111118900605723370408179509385635026071171753753971595311787642734631255964171862122769944457180726400998943127699312803767434715288361724087668246765014517459204849384289109400945501970120079571242292263003580693943675421103055474447477714088715152187480821234096948376237000274125436883412941520149190410628950218970046258316526819969725037214674496182020171795914405397978564551277552586278109771686568007143134450111699204213342342246127354528257251352614071191397288071566525113181)
		self.s = [
			long(74332719096221206106095413109489442556412674825434719873207141231851147737127197391906741598378504415959602075501335730289813436398489742995603068854079752404138620323703523041117245732819213883599503815599719939011116914832748780029602379931307630902807316035557622033926441147418919531413079746799717078336),
			long(34872423687895948428383046966107511012117343192669254962765777779167265970438768720409291600764875802011258131118791825955444630625044507357502490713148628813640088619004105947852159225019387159440126413970642011808579287084591173223680469549109603755406534478566040384522623608286101341827824102274449010401),
			long(154874163956744654818223171147503719881005243825222810855281925580645726002292528891363223824988118532934654806025539745793215266303695143314960370281470732554958348495153722762842459578689270168248409950672481662102930532316997181076101143593794661738568873661056606515862323851655244966058759536498402546110),
			long(90761665601646844651874079550419223979545228246924857894861745496960497633116803179399235548823409620329490285982281551498256601593209568547304258261773115719927800553084059490714000470243912034525631436146559327997445304567545288585238956417308223117366103775979382748152531523918526831273669131563912108610),
			long(70591149646013650282127363446502672482449011466152863456069689438100848192363965221299505245557948640825363164209577481601061253869431281202879732120328023727065207546957618097079507197453223657851919497522813135612253171142504691590575945034609152321017730419383304128475930585712721782107349425188100936001),
		]
		self.k = 5
		self.t = 4	
		#inverse modulo for b=0
		self.v_0 = [
			long(28930548497486498017704092256317401111380337417311629661378912833038334028622357795725860234992008092451362457934498958427307660599791770736274099472296897033500572967281562828003518121633844792920703669819849930750100180708839326576872485544440866686454610678901203479142793689837567295181627435050837621312641735981560944075630912586556286164600205159612872947455222573333339500665011098316667492869766769076523136258460869185752174432714847752771758847722671460659236832721597452720937843640976017117296516200465338558357448529114297495989688522000105800214685887777765095942287393489133269061846008988040726652806),
			long(43244205354454777660258782336351807258987633653448115523776128531418037968201774750623800782694985845989839098842746345141472759874468938019933804292874373868902633266277914608874403396574326771668525129068007587598274964447071458552014936731776836397472765491245387429650052727059404375414447960821422039690217815468976386135018992664820700262442557565772950887872275416210900421973348144420846366018725782405939021254791512080478662376921691355735090367454955879170884327427133269551364050669516662215862708638970449936495070917126053962201873898759961076512377219360933244853662676177523856617234572577579579161335),
			long(33114534376094063838732607069912297938383116665683634545863428806425499351931868281193869652561451107286726293011233761959073622116918909573732260009368871993228294710582611922999746494493408809823824211690339099945118284418344411312062374849089678463407960926803084611082833708949324713834787852756023066397293134104607860521694991812877118464595484042055148990059718929779164261427978018991301759093762030220107689097241138822638018298058951981078614983399081857347463838520645015416158648803738356183062034686765763766126578994857257953050406873268369562018478775471554214260583906465628976396971626282778938323838),
			long(5685888617106196464979954596413321472825346399482866582243618318067084138091297990897667912323383139679652539306846299580408382232576901841786252201873553063410254888845668561718876159251248103137031462953949955177407163625719454490811441931469064635548990519796426322374899813593006016667082295087473532067117991301455637089723143472753398631754382050635368526664246953389216926644734842743455373276042181118320487111454454277766713725068188950456167417200916902335054296636582144661357671625117546748480041470482957879086506938410787601493697266626852077653899829391161018904896541345308701146322972427193303328301),
			long(45865261218672700846266785177234960494487267379842536825416941354955639066291421698087361140220897855935815900973493154023115015512512145164834257163414351803889849475748139608825900421818375506338767542906591624572427291493209481013952500532748987553181067433248496509301203272738246101740460905683117236322253329634589009767847209703308030524616902966838286910364857057369053092853937293972094602835491253066260528829689074034440564398027777638085226112762813547714266706824160795399421111549932550591472006522940960595961642519983614567731947538348048399170513905266218530363107415963973205293234579437085921340251),
		]
		#inverse modulo for b=1
		self.v_1 = [
			long(47966114217021788727030430516396248026063368711278439118218540884818045845952457188417424387518036066814234085945205170093307093014319348164331623898111282475885062058789608925750453473677942849813927586144321931372669763748341399824126457583258446117312824036387158244944874556927447222277577414333451488088303765988559135495611379676447294529343470261490182526992255140755375651522469722917429455506470231197602300624952072334397015977914102466198287410593855359310488204493077043461082328154938388280682048350812214027920661242572270511153445928111593403998656454468362258585969857863480802129551279083525798460375),
			long(33652457360053509084475740436361841878456072475141953255821325186438341906373040233519483839815058313275757445036957783379141993739642180880671919077533805640483001759793257144879568198737460871066106126896164274524494980010109267848984006395922476406294669224042974294437615519705610142044756888562867069710727686501143693436223299598182880431501117855330104586575202297877814730214132676813250582357511217868186415628621429439670528033707258863234955890861570940798840709787541226630656121126397743182115855912307102649783038854560514044941260551351738127700965122885194109674594575175090214574162715493986945951846),
			long(43782128338414222906001915702801351199060589462906434233734024911430880522642946702949414969948593051978870250868470366561541131497192209326873463361039307516157340315488559830754225100818378832910807044273832762177651660038836315088936568278609634340359473788485277113004834537815689803624416996628266043003652367865512219049547300450126462229348191379047906484387758784309550890759502802242795189282474970054017747786171802697511172112569998237891431274917444962622261198694029480765861522992176049214916529864511788820151530776829310054092727576843329642194863566774573140267673344886985094794425661788787586789343),
			long(71210774097402090279754568176300327664618359729107202197353835399789295736483516993245616710186661019585944004572857828940206371381534217058819471168534626445975380137225503192035095436060539539597599793010221906945362780831461271910187501196230248168218444195491935401712768433172008500792122554296815577333827510668664442481519148790250182062189293370467686947783230760699498225542745978490641575100194819155804949771958487242382476685560761268513878841115609917634670740578092351520662500170796858649498523080794594707191602833275780405649437183484847126559442512854966335623360710007305370045074315644373221784880),
			long(31031401495835585898467737595478688642956438748747531954180512362900740808283393286055923482289146303329780642906210974497499738101598973735771466206993827705495785550323032144928071173493412136395863713057580237550342652963971245387046442594950325250586367282039865214786464974026768415718743943701171873078692172335531069803395082559695550169326772454264768564082620656719662059333543527262002345540745747207864908053723867485708626012601172580884820145553713272255458330390513700782599060245981854806506558028336591990316467251702953439411186911763650805042828436979908824165149835388640865898162708634480603772930),
		]


		self.r = None
		self.e = []
		self.x = None
		self.y = None
		self.z = None
		self.v = []

	def genX(self):
		"""
		A chooses a random integer r, 1 <= r <= n - 1, and a random bit b; computes
		x = (-1)^b * r^2 mod n;
		"""
		#generate random r
		self.r = long(randint(1, self.n-1))

		#random bit
		b = randint(0,1)

		x_1 = long(pow(-1, b, self.n))
		x_2 = long(pow(self.r, 2, self.n))
		self.x = long((x_1 * x_2) % self.n)

		return self.x

	def genY(self):
		"""
		Y value from A to B
		"""
		s = long(1)

		#SUM of (Sj)^(Ej) mod n
		for i in range(0, self.k):
			s *= pow(self.s[i], self.e[i], self.n)

		#the product s and r
		self.y = long((self.r * s) % self.n)

		return self.y

	def genZ(self):
		"""
		Z value for identity check
		"""
		s = long(1)

		#SUM of (Vj)^(Ej) mod N
		for i in range(0, self.k):
			s *= pow(self.v[i], self.e[i], self.n)	

		#Y^2 * S mod N
		self.z = long((pow(self.y, 2, self.n) * s) % self.n)

		return self.z

	def genVectorV(self):
		"""
		Vector V which we get as inverse modulo of values in S vector
		"""
		for i in range(0, self.k):
			if randint(0,1) == 0: #bit 0
				self.v.append(self.v_0[i])
			else: #bit 1
				self.v.append(self.v_1[i])
		
		return self.v

	def genVectorE(self):
		"""
		K-bit vector from B to A
		"""
		self.e = []

		#generate bits
		for i in range(0, self.k):
			self.e.append(randint(0,1))

		return self.e

	def isValid(self):
		"""
		Check if identity is valid
		"""
		if self.z == 0:
			return False

		#positive value of x
		if self.z == self.x:
			return True
		#modular minus of value -x
		elif self.z == ( (-self.x % self.n + self.n) % self.n ):
			return True

		return False
	
	#setters
	def setX(self, x):
		self.x = x
	def setY(self, y):
		self.y = y
	def setZ(self, z):
		self.z = z

	#appends
	def appendV(self, v):
		self.v.append(v)
	def appendE(self, e):
		self.e.append(e)

	#getters
	def getV(self):
		return self.v
	def getZ(self):
		return self.z
	def getK(self):
		return self.k
	def getE(self):
		return self.e
	def getT(self):
		return self.t


