#xsvest05 | KRY - 1. project | VUT FIT
#Diffie-Hellman

import ssl
import math
import hashlib
import OpenSSL

class DiffieHellman(object):

	def __init__(self):
		#https://tools.ietf.org/html/rfc5114
		#http://www.floatingdoghead.net/bigprimes.html
		#vulnerability after year 2030
		self.p = long("c56e3ff907cb63e9683d1678a6f9b3970af14098361bf97ac4ecc9fea0758a4ff77e539b248af27b787abfc1306141bb265e2756c16a2cdc642317e43b165f65b0ddac84a597f561df5bbfe67314dda021f39880609c45e04b89bcd88d40d47d4277bd7d3574e4dadc019462f4cfc930d981adb9166a65c64a4acf1c9fcf8a1087bf2ffa8054c59dce0f3937954d5d5f099b293b8fa4d91be8a527b4819193160884a1986cd624f30ae49334114de45b72bdb4148382121032bb2dc5c3349deb4e30f892aa2596a22685b4ee4c44097d4124cac6a84db5d67109ef91ad5c0e275f58795ea012a10e3b1f8818f2199481d608dbaaf2421d67d9fb9c03b7f9cda077af6646e2d2dc4383bf703265d64a87d7ba14f5adf0f2807a39d78c70ce0b9812308aaedc56803d0550387748e3f3bcc7311653134d071e71c336c9e710666fd51959d87a7d828ef48ecd698ae28f7c39d83ed08154b8d853ba9802fb94df8ecb86439a0bafd1c230d5227960ed7c7d48af72c016c3cb00b790157cca31acbfc4bd8a4a8def57717bd4b7a0b845f19273304bbc52760cd799f108c9cf387662d0c5766ee23a4aea8fce0a8330f875cc6375057101d3350a51c1ff62868c1174ccd74d238481c4ab7c528f4216b516d79e64680dfd6c64b90dacb88c6976d375499fd88a39347012812ebddb56b20237af23afe6451e9c5444b268a3d8411d243f4f48e79e32f65b7523f967be1bb098b2d03dbbefbb7225c781c394feb3b2f017ac6fc83c36178d8987c52e8dc7882e5bf2fef1b197fec43e3755aeff9ac790745bbf27ede558a2c92332a7bd2f61f721500dab94384f2ab624c8a9c92dbe22f35e7407c7d11901d140209541fc7fa9be755299b4d41e31929c80c8e58eb7d8343e5fb10751d56ba1bbc93529db87f27eb498197a9935e5431e150e9fc0c3820589ad5d65ac954412a60abf93f7f0963da597e1d6a463a2de9e110e6dc6a488e3573b1ea954a9b213f46ce9bd2a45409636f05896a21b0952d69fca7762180e328c0c59aa98b6a4a2a2130c1bcbc50e516e283435bd74ea924db3f12cafb34d24c1c30aa7f5c12e97d31c2b34a737aef985d0cd5c97cc43f220f44b9f492ff2971acbf0ce2acd4da3d5c671544e50b6927b8f77e82741e47754ab55c716a8cd2ee290a376b022cc753912da3e8ae43dce4980bfb97f408e0ad724af65e5b5ea9cb45c799e5f30306ca1b25085ff5e7da53db4b068021c6be11ccfc17d60c4f8396075abccc31650409cebf18ecc8a6ffe685c198613e7de12071f113395add407107ee66d4de3ec0e463467bac0a595241d1f57fd5e457f234ddd4ab1e0ef0b91867dfd5b6129dd3d763d82fdec8e839e78e777b74d8b38a32e26e4d441c3354814970ced5d55b725b7ebfbb22e5b9001cf60ce1f270d34c076b72fde1896ed1d1565f277b725b40db4b9e1ede1b0e277f63ac7dc239a967d93915a84bbfbc0a515e204f582d22f6c8463996fb00791e8d1197d4f21a131efa542ec532f3a4cf1ce6034dac128baa71f30097390f23cc038fd6679c50556616522d5f72aa9885ac8f269a4a209b211ebf06e4b6524be577a10f69040ec4dc61d06514d6d06829111b9a01f2f487276812ab0d4080cf39247ea32ab9acbcf9e13de0233d25c6d76d068d9f6f1d7bc8dc1fdf00d3438888ef3c72573fc7a1539fd24022d096b983c7ccc5e4178ba773aa1a0f62b53dc4c6f2430d1b74d2ef9b321acf4723499a12322bb413cacc4e63ecd11d3f5aa3be474a2fee019591133ec62f461eef871abca586c99c31c1db9fc8f289eb1ec0ca46578781db5fed330f5e8ba43b19e7976bf205445bee5b8274b3ac50b99fd5dd4f71e00290fd6402846d5d3d184e72da816c1b0f43bcf0a05715e5e6b0043babeadc590a2aa3791c10a47e70c047ecc0d7c5e06333ce203f7a0ac01499df98e77df674d2df392971f9bd39a2e8026a93e8edd46d6e72fb00d6455e90bee5b40486abefc51bebddfd2bbd100cc29a39159f4839b4a9b063716c18beddc489241e654282e2bc5ad022daffc1a1372a588bcf3dc46717d71dbbb2c9ff42d19120c8c726325cde3d0ff19c1b213d7f969ff6e7a51796a0d3d3fa79a44d37928fe2059b15b7b4099b303fe893ceb8023ed528120e8a06fe0dbab03c433f5b8af21c7d087f3b1a8d86fc4047b21bcf952c8f9bb1e5f48779a4ef2ff543d7b0bd2eabe0ce68344a92550400f1af4097774ab2693baa99aaad0529c50bba7d75e3c20fa09cfc4f9801e85e90e820a711c44a433158ef31393b9c27a3157615d1451b7f5aac8515cc9bbc9b0ba1f54b83fc1158b5a270fb3c7495344d898c078e41b1a40678b7f519e7ddf32b8f72a356c21486a5a0927446d497f8e560e315cdd9f4259deaf1cf98daa8d3a9248aa1e63adf66728ddb57233049216670190734cf8447fc9f51c5eb4e8a937aeb098f9fcaad47dbc8eb241835e558f2d2d889127c3ff11f87510cad57c00db0956fa57fb62b20ada009c59fca93dde2c142aa21af106aa8b8d86bd1a05ff33f2c124256edfcbfc7deb1784aa21506880cf807dbd6d42523790d65ee0911ef50708dd3741632e3740a322bcd8261ed93aabef6dfa0a936a7ba6fdf0707b21948e5f4103edd09e9e2f4372c4cc953a22306f6ba57b9c0f515d865f0e838efa4ce233fe8eb4bbc2c08117b11a433a400e83e5d240633c969ba49059cdf3ce2d7783e9dbd51dd4d3ea8d25efb874f6d52e03ec3f22b2fc114d0f7d374b4ec1ed072468643312b4c4d9671b9f2d087bfce362ebbcae809cfc6d9a4d5f98b75e89a6991da3da4179800864351f8324d3d0b66aaede4c527aac6ea9072b3b9bc8be44c5ef41d0f1994bcb2b", 16)
		self.g = long(2)	
		#https://www.keylength.com/en/4/	
		keyBitsLength = 512


		self.privateKey = self.genPrivateKey(keyBitsLength)
		self.secret = None
		self.key = None

	def genRandom(self, bits):
		"""
		Generates random INTEGER with n bits
		"""
		rand = 0
		while len(bin(rand).lstrip('-0b')) < bits:
			rand = long(OpenSSL.rand.bytes(int(math.ceil(bits / 8))).encode('hex'), 16)

		return rand


	def genPrivateKey(self, keyBitsLength):
		"""
		Generates private key of specified length in bites
		"""
		return self.genRandom(keyBitsLength)

	def getPrivateKey(self):
		return self.privateKey

	def getPublicKey(self):
		"""
		Calculate g^privateKey mod p
		"""
		return pow(self.g, self.privateKey, self.p)

	def genSecret(self, publicKeyFromOppositeSide):
		"""
		Generate secret
		"""
		self.secret = long(pow(publicKeyFromOppositeSide, self.privateKey, self.p))
		self.genKey()

	def getSecret(self):
		return self.secret

	def genKey(self):
		"""
		Generate key
		"""
		s = hashlib.sha256()
		s.update(bytes(self.secret))
		self.key = s.digest()

	def getKey(self):
		return self.key
